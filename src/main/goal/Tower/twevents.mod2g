use tower as knowledge.

define constructiveMove(X, Y) as
	a-goal( tower([X,Y|T]) ), bel( tower([Y|T]), clear(Y), (clear(X) ; holding(X)) ).
define misplaced(Z) as a-goal(tower([X,Y|T])), bel(above(Z,X) ; above(Z,Y)).

module twevents {
	% assumes full observability
	forall bel( block(X)), not(percept(block(X)))  do delete( block(X) ).
	forall percept(block(X)), bel(not(block(X)) ) do insert( block(X) ).
	
	forall bel( holding(X)), not(percept(holding(X))) do delete( holding(X) ).
	forall percept(holding(X)),  bel( not(holding(X)) ) do insert( holding(X) ).
	
	forall bel( on(X,Y)), not(percept(on(X,Y))) do delete( on(X,Y) ).
	forall percept(on(X,Y)), bel(not(on(X,Y)) ) do insert( on(X,Y) ).
	
	% check for reasons to drop or adopt a goal (goal management).    
    if goal( holding(X) ) then {
		% first reason: cannot pick up block X because it's not clear.
		if not(bel( clear(X) )) then drop( holding(X) ).
		% second reason: cannot pick up block X because now holding other block!
		if bel( holding(_) ) then drop( holding(X) ).
		% third reason: block X is already in position, don't touch it.
		if goal-a( tower([X|T]) ) then drop( holding(X) ).
		% fourth reason: we can do better by moving another block constructively.
		listall L <- constructiveMove(Y,Z) do {
			if bel(not(L=[]), not(member([X,_],L))) then drop( holding(X) ).
		}
	}	
	if not(goal(holding(_))), constructiveMove(X,Y) then adopt(holding(X)).
    if not(goal(holding(_))), misplaced(X), bel(clear(X)) then adopt(holding(X)).
}