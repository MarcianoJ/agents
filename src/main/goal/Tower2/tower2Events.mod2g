use tower as knowledge.
use adoptgoal.

% a block is *in position* if it achieves a goal.
define inPosition(X) as goal-a( tower([X| T]) ).
		
define constructiveMove(X, Y) as 
	a-goal( tower([X, Y | T]) ), bel( tower([Y | T]), clear(Y), (clear(X) ; holding(X)) ) .
	
module event{
	% first, process percepts from Tower World environment.
	% rules below assume full observability.
	forall bel(block(X)), not( percept( block(X) ) )  do delete( block(X) ).
	forall percept( block(X) ), bel(not( block(X) ) ) do insert( block(X) ).
	
	forall bel( holding(X)), not( percept( holding(X) ) ) do delete( holding(X) ).
	forall percept( holding(X) ), bel(not( holding(X) ) ) do insert( holding(X) ).
	
	forall bel( on(X, Y)), not( percept( on(X,Y)))  do delete( on(X, Y) ).
	forall percept( on(X, Y) ), bel(not( on(X, Y) ) ) do insert( on(X, Y) ).
	
	% check for reasons to drop or adopt a goal (goal management).
	if goal( holding(X) ) then {
		% first reason: cannot pick up block X because it's not clear.
		if bel( not( clear(X) ) ) then drop( holding(X) ).
		% second reason: cannot pick up block X because now holding other block!
		if bel( holding(_) ) then drop( holding(X) ).
		% third reason: block X is already in position, don't touch it.
		if inPosition( X ) then drop( holding(X) ).
		% fourth reason: we can do better by moving another block constructively.
		listall L <- constructiveMove(Y,Z) do {
		  if bel( not( L=[] ), not( member([X,_],L) ) ) then drop( holding(X) ).
		}
	}
	
	% adopt new goal only after cleaning up.
	% rules for adopting the goal to hold a block in module with linear order.
	% holding(X) is a *single instance goal* to maintain focus.
	if not(goal( holding(X) )), not(bel( holding(Y) )) then adoptgoal.
}